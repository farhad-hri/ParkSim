def map_lot(type, config_map, Car_obj):

    s = config_map['map-params'][type]['start'][:3]
    s[2] = np.deg2rad(s[2])

    obstacleX, obstacleY = [], []
    ## Parallel Parking Map
    y_min = config_map['map-params'][type]['y_min']
    x_min = config_map['map-params'][type]['x_min']
    l_w = config_map['map-params'][type]['lane_width']
    p_w = config_map['map-params'][type]['park_width']
    p_l = config_map['map-params'][type]['park_length']
    n_r = config_map['map-params'][type]['n_rows']
    n_s = config_map['map-params'][type]['n_spaces']

    s[0] = s[0] + l_w + 2*p_l + 0.75*l_w
    s[1] = s[1] + 0.2*l_w # 0.8*l_w for -np.deg2rad(s[2]) (-90 deg)

    n_s1 = int(n_s/2)

    x_max = int(x_min + (n_r+1)*l_w + 2*n_r*p_l)
    y_max = int(y_min + l_w + n_s1 * p_w + l_w)

    # x_min = s[0] - 10.0*
    # x_max = s[0] + 10.0
    # y_min = s[1] - 5.0
    # y_max = s[1] + 15.0

    center_line_park_row_y = [y_min + l_w, y_max - l_w]

    center_line_park_row_x_1 = x_min + l_w + p_l

    for _ in range(n_r):
        center_line_park_row_x = [center_line_park_row_x_1] * len(center_line_park_row_y)

        short_line_park_row_x = [center_line_park_row_x_1- p_l, center_line_park_row_x_1 + p_l]

        short_line_park_row_y_1 = y_min + l_w + p_w
        for _ in range(n_s1-1):
            short_line_park_row_y = [short_line_park_row_y_1]*len(short_line_park_row_x)

            short_line_park_row_y_1 += p_w

        center_line_park_row_x_1 += 2*p_l + l_w

    # parked cars 0
    p_x = x_min + 1 * l_w + p_l / 2 + Car_obj.length / 2 - Car_obj.axleToBack
    p_yaw = np.pi
    j_indices = [0, 1, 2, 3]

    car = np.array(
        [[-Car_obj.axleToBack, -Car_obj.axleToBack, Car_obj.axleToFront, Car_obj.axleToFront, -Car_obj.axleToBack],
         [Car_obj.width / 2, -Car_obj.width / 2, -Car_obj.width / 2, Car_obj.width / 2, Car_obj.width / 2]])

    rotationZ = np.array([[math.cos(p_yaw), -math.sin(p_yaw)],
                          [math.sin(p_yaw), math.cos(p_yaw)]])

    car = np.dot(rotationZ, car)

    for j in j_indices:

        p_y = y_min + l_w + j * p_w + p_w / 2

        car1 = car + np.array([[p_x], [p_y]]) # (2xN) N are vertices

        ## Car
        for i in range(car1.shape[1]-1):
            line = np.linspace(car1[:, i], car1[:, i+1], num = 10, endpoint=False)
            obstacleX = obstacleX + line[:, 0].tolist()
            obstacleY = obstacleY + line[:, 1].tolist()

        ## Car
        # for i in range(car1.shape[1]-1):
        #     obstacleX.append(car1[0, i])
        #     obstacleY.append(car1[1, i])
        #
        # for i in range(math.floor(car1[1, 0]), math.ceil(car1[1, 1])-1, -1):
        #     obstacleX.append(car1[0, 0])
        #     obstacleY.append(i)
        #
        # for i in range(math.ceil(car1[0, 1]), math.floor(car1[0, 2])+1):
        #     obstacleY.append(car1[1, 1])
        #     obstacleX.append(i)
        #
        # for i in range(math.ceil(car1[1, 2]), math.floor(car1[1, 3])+1):
        #     obstacleX.append(car1[0, 2])
        #     obstacleY.append(i)
        #
        # for i in range(math.floor(car1[0, 3]), math.ceil(car1[0, 4]), -1):
        #     obstacleY.append(car1[1, 3])
        #     obstacleX.append(i)

    # parked cars 1
    p_x = x_min + 1 * l_w + 1 * p_l + p_l / 2 - (Car_obj.length / 2 - Car_obj.axleToBack)
    p_yaw = 0.0
    j_indices = [0, 2, 3]

    for j in j_indices:

        if j==2:
            p_yaw = 0.0*np.pi/180
            p_y = y_min + l_w + j * p_w + p_w / 2 - 0.1 # -0.1 is disturbance
        else:
            p_yaw = 0.0
            p_y = y_min + l_w + j * p_w + p_w / 2

        ## Car
        car = np.array(
            [[-Car_obj.axleToBack, -Car_obj.axleToBack, Car_obj.axleToFront, Car_obj.axleToFront, -Car_obj.axleToBack],
             [Car_obj.width / 2, -Car_obj.width / 2, -Car_obj.width / 2, Car_obj.width / 2, Car_obj.width / 2]])

        rotationZ = np.array([[math.cos(p_yaw), -math.sin(p_yaw)],
                              [math.sin(p_yaw), math.cos(p_yaw)]])

        car = np.dot(rotationZ, car)

        car1 = car + np.array([[p_x], [p_y]]) # (2xN) N are vertices

        # ## Car
        for i in range(car1.shape[1]-1):
            line = np.linspace(car1[:, i], car1[:, i+1], num = 10, endpoint=False)
            obstacleX = obstacleX + line[:, 0].tolist()
            obstacleY = obstacleY + line[:, 1].tolist()

        # for i in range(car1.shape[1]-1):
        #     obstacleX.append(car1[0, i])
        #     obstacleY.append(car1[1, i])
        #
        # for i in range(math.floor(car1[1, 0]), math.ceil(car1[1, 1])-1, -1):
        #     obstacleX.append(car1[0, 0])
        #     obstacleY.append(i)
        #
        # for i in range(math.ceil(car1[0, 1]), math.floor(car1[0, 2])+1):
        #     obstacleY.append(car1[1, 1])
        #     obstacleX.append(i)
        #
        # for i in range(math.ceil(car1[1, 2]), math.floor(car1[1, 3])+1):
        #     obstacleX.append(car1[0, 2])
        #     obstacleY.append(i)
        #
        # for i in range(math.floor(car1[0, 3]), math.ceil(car1[0, 4]), -1):
        #     obstacleY.append(car1[1, 3])
        #     obstacleX.append(i)


    # parked cars 2
    p_x = x_min + 2 * l_w + 2 * p_l + p_l / 2 + Car_obj.length / 2 - Car_obj.axleToBack
    p_yaw = np.pi
    j_indices = [0, 2, 3]

    car = np.array(
        [[-Car_obj.axleToBack, -Car_obj.axleToBack, Car_obj.axleToFront, Car_obj.axleToFront, -Car_obj.axleToBack],
         [Car_obj.width / 2, -Car_obj.width / 2, -Car_obj.width / 2, Car_obj.width / 2, Car_obj.width / 2]])

    rotationZ = np.array([[math.cos(p_yaw), -math.sin(p_yaw)],
                          [math.sin(p_yaw), math.cos(p_yaw)]])

    car = np.dot(rotationZ, car)
    for j in  j_indices:

        p_y = y_min + l_w + j * p_w + p_w / 2

        car1 = car + np.array([[p_x], [p_y]]) # (2xN) N are vertices

        ## Car
        for i in range(car1.shape[1]-1):
            line = np.linspace(car1[:, i], car1[:, i+1], num = 10, endpoint=False)
            obstacleX = obstacleX + line[:, 0].tolist()
            obstacleY = obstacleY + line[:, 1].tolist()

        # for i in range(car1.shape[1]-1):
        #     obstacleX.append(car1[0, i])
        #     obstacleY.append(car1[1, i])
        #
        # for i in range(math.floor(car1[1, 0]), math.ceil(car1[1, 1])-1, -1):
        #     obstacleX.append(car1[0, 0])
        #     obstacleY.append(i)
        #
        # for i in range(math.ceil(car1[0, 1]), math.floor(car1[0, 2])+1):
        #     obstacleY.append(car1[1, 1])
        #     obstacleX.append(i)
        #
        # for i in range(math.ceil(car1[1, 2]), math.floor(car1[1, 3])+1):
        #     obstacleX.append(car1[0, 2])
        #     obstacleY.append(i)
        #
        # for i in range(math.floor(car1[0, 3]), math.ceil(car1[0, 4]), -1):
        #     obstacleY.append(car1[1, 3])
        #     obstacleX.append(i)


    # parked cars 3
    p_x = x_min + 2 * l_w + 3 * p_l + p_l / 2 - (Car_obj.length / 2 - Car_obj.axleToBack)
    p_yaw = 0.0
    j_indices = [0, 1, 2, 3]

    car = np.array(
        [[-Car_obj.axleToBack, -Car_obj.axleToBack, Car_obj.axleToFront, Car_obj.axleToFront, -Car_obj.axleToBack],
         [Car_obj.width / 2, -Car_obj.width / 2, -Car_obj.width / 2, Car_obj.width / 2, Car_obj.width / 2]])

    rotationZ = np.array([[math.cos(p_yaw), -math.sin(p_yaw)],
                          [math.sin(p_yaw), math.cos(p_yaw)]])

    car = np.dot(rotationZ, car)
    for j in  j_indices:

        p_y = y_min + l_w + j * p_w + p_w / 2

        car1 = car + np.array([[p_x], [p_y]]) # (2xN) N are vertices

        ## Car
        for i in range(car1.shape[1] - 1):
            line = np.linspace(car1[:, i], car1[:, i + 1], num = 10, endpoint=False)
            obstacleX = obstacleX + line[:, 0].tolist()
            obstacleY = obstacleY + line[:, 1].tolist()

        # for i in range(car1.shape[1]-1):
        #     obstacleX.append(car1[0, i])
        #     obstacleY.append(car1[1, i])
        #
        # for i in range(math.floor(car1[1, 0]), math.ceil(car1[1, 1])-1, -1):
        #     obstacleX.append(car1[0, 0])
        #     obstacleY.append(i)
        #
        # for i in range(math.ceil(car1[0, 1]), math.floor(car1[0, 2])+1):
        #     obstacleY.append(car1[1, 1])
        #     obstacleX.append(i)
        #
        # for i in range(math.ceil(car1[1, 2]), math.floor(car1[1, 3])+1):
        #     obstacleX.append(car1[0, 2])
        #     obstacleY.append(i)
        #
        # for i in range(math.floor(car1[0, 3]), math.ceil(car1[0, 4]), -1):
        #     obstacleY.append(car1[1, 3])
        #     obstacleX.append(i)


    # for ax in axes:
    #     ax.scatter(parked_cars_x + moving_cars_x, parked_cars_y + moving_cars_y, color='black',
    #             marker='s', s=6)

    for i in range(x_min, x_max+1):
        obstacleX.append(i)
        obstacleY.append(y_min)

    for i in range(y_min, y_max+1):
        obstacleX.append(x_min)
        obstacleY.append(i)
    #
    for i in range(x_min, x_max+1):
        obstacleX.append(i)
        obstacleY.append(y_max)

    for i in range(y_min, y_max+1):
        obstacleX.append(x_max)
        obstacleY.append(i)

    obstacleX.append(0.0)
    obstacleY.append(0.0)

    return x_min, x_max, y_min, y_max, p_w, p_l, l_w, n_r, n_s, n_s1, obstacleX, obstacleY, s
